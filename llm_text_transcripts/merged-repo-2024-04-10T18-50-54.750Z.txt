
/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/ADDLIVEPREVIEWURLS.JS CODE IS BELOW
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');

async function addLivePreviewUrls() {
  try {
    // Read the existing templates JSON file
    const templatesJson = fs.readFileSync('templates.json', 'utf8');
    const templates = JSON.parse(templatesJson);

    console.log(`Found ${templates.length} templates. Starting to add live preview URLs...`);

    // Iterate over each template
    for (const [index, template] of templates.entries()) {
      try {
        console.log(`Processing template ${index + 1}/${templates.length}: ${template.link}`);

        // Make a request to the template's URL
        const response = await axios.get(template.link);
        const $ = cheerio.load(response.data);

        // Find the live preview URL from the button's href attribute
        const livePreviewUrl = $('#hero-browser-preview').attr('href');

        if (livePreviewUrl) {
          // Add the live preview URL to the template object
          template.livePreviewUrl = livePreviewUrl;
          console.log(`Added live preview URL: ${livePreviewUrl}`);
        } else {
          console.log('Live preview URL not found.');
        }
      } catch (error) {
        console.error(`Error processing template: ${template.link}`, error);
      }
    }

    // Write the updated templates array back to the JSON file
    fs.writeFileSync('templates.json', JSON.stringify(templates, null, 2));
    console.log(`Processing completed. Updated ${templates.length} templates in templates.json`);
  } catch (error) {
    console.error('Error processing templates:', error);
  }
}

addLivePreviewUrls();

/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/PUBLIC/APP.JS CODE IS BELOW
const templateGrid = document.getElementById('template-grid');

function createTemplateCard(template) {
  const card = document.createElement('div');
  card.classList.add('template-card');
  card.dataset.tags = template.tags.join(',');

  const titleDiv = document.createElement('div');
  titleDiv.classList.add('title-div');

  const title = document.createElement('h3');
  title.textContent = template.title;
  titleDiv.appendChild(title);

  const screenshotImg = document.createElement('img');
  screenshotImg.src = template.screenshotPath;
  screenshotImg.alt = 'Template Screenshot';
  titleDiv.appendChild(screenshotImg);

  card.appendChild(titleDiv);

  const actionsDiv = document.createElement('div');
  actionsDiv.classList.add('actions-div');

  const previewButton = document.createElement('button');
  previewButton.textContent = 'Quick Preview';
  previewButton.addEventListener('click', () => openPreviewModal(template.livePreviewUrl, template.link));
  actionsDiv.appendChild(previewButton);

  const templateLink = document.createElement('a');
  templateLink.href = template.link;
  templateLink.target = '_blank';
  templateLink.textContent = 'Template URL';
  actionsDiv.appendChild(templateLink);

  card.appendChild(actionsDiv);

  return card;
}

function lazyLoadScreenshots() {
  const lazyScreenshots = document.querySelectorAll('.lazy-screenshot');

  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observerCallback = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        img.classList.remove('lazy-screenshot');
        observer.unobserve(img);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  lazyScreenshots.forEach(img => {
    observer.observe(img);
  });
}

function openPreviewModal(previewUrl, templateUrl) {
  const modal = document.createElement('div');
  modal.classList.add('modal');

  const modalContent = document.createElement('div');
  modalContent.classList.add('modal-content');

  const buttonsContainer = document.createElement('div');
  buttonsContainer.classList.add('buttons-container');

  const closeButton = document.createElement('button');
  closeButton.textContent = 'Close';
  closeButton.addEventListener('click', () => closePreviewModal(modal));
  buttonsContainer.appendChild(closeButton);

  const templateUrlButton = document.createElement('button');
  templateUrlButton.textContent = 'Go to Template URL';
  templateUrlButton.addEventListener('click', () => window.open(templateUrl, '_blank'));
  buttonsContainer.appendChild(templateUrlButton);

  modalContent.appendChild(buttonsContainer);

  const previewContainer = document.createElement('div');
  previewContainer.classList.add('preview-container');

  const previewIframe = document.createElement('iframe');
  previewIframe.src = `/proxy?url=${encodeURIComponent(previewUrl)}`;
  previewIframe.classList.add('preview-iframe');
  previewContainer.appendChild(previewIframe);

  modalContent.appendChild(previewContainer);

  modal.appendChild(modalContent);
  document.body.appendChild(modal);

  setTimeout(() => {
    modal.style.opacity = '1';
    modalContent.style.transform = 'scale(1)';
  }, 0);
}


function closePreviewModal(modal) {
  const modalContent = modal.querySelector('.modal-content');
  modal.style.opacity = '0';
  modalContent.style.transform = 'scale(0.8)';

  setTimeout(() => {
    modal.remove();
  }, 300);
}

function lazyLoadIframes() {
  const lazyIframes = document.querySelectorAll('.lazy');

  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observerCallback = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const iframe = entry.target;
        iframe.src = iframe.dataset.src;
        iframe.classList.remove('lazy');
        observer.unobserve(iframe);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  lazyIframes.forEach(iframe => {
    observer.observe(iframe);
  });
}

function shuffleTemplates() {
  const cards = Array.from(templateGrid.children);
  for (let i = cards.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [cards[i], cards[j]] = [cards[j], cards[i]];
  }
  cards.forEach(card => templateGrid.appendChild(card));
}

function initializeTagSearch(tags) {
  const tagSearch = document.getElementById('tag-search');
  new Awesomplete(tagSearch, {
    list: tags,
    autoFirst: true,
    filter: Awesomplete.FILTER_CONTAINS,
    minChars: 1,
    maxItems: 5
  });

  tagSearch.addEventListener('awesomplete-selectcomplete', (event) => {
    const selectedTag = event.text.trim();
    filterTemplatesByTag(selectedTag);
  });
}

function filterTemplatesByTag(selectedTag) {
  const lowerCaseSelectedTag = selectedTag.toLowerCase();
  const templateCards = document.querySelectorAll('.template-card');
  templateCards.forEach(card => {
    const tags = card.dataset.tags.split(',');
    if (tags.includes(lowerCaseSelectedTag)) {
      card.style.display = 'block';
    } else {
      card.style.display = 'none';
    }
  });
}

async function loadTemplates() {
  try {
    const response = await fetch('/api/templates');
    const templates = await response.json();
    
    const uniqueTags = new Set();
    const cards = templates.map(template => {
      template.tags = template.tags.map(tag => tag.toLowerCase());
      template.tags.forEach(tag => uniqueTags.add(tag));
      return createTemplateCard(template);
    });
    
    // Shuffle the cards
    shuffleArray(cards);
    
    // Append the shuffled cards to the templateGrid
    cards.forEach(card => templateGrid.appendChild(card));
    
    initializeTagSearch(Array.from(uniqueTags));
    lazyLoadIframes();

    const shuffleBtn = document.getElementById('shuffle-btn');
    shuffleBtn.addEventListener('click', shuffleTemplates);
  } catch (error) {
    console.error('Error loading templates:', error);
  }
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

loadTemplates();

/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/PUBLIC/INDEX.HTML CODE IS BELOW
<!DOCTYPE html>
<html>
<head>
  <title>Webflow Template Gallery</title>
  <link rel="stylesheet" href="styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
</head>
<body>
  <div class="header">
    <h1>Webflow Template Gallery</h1>
    <div id="tag-search-container">
      <input type="text" id="tag-search" placeholder="Search tags...">
    </div>
  </div>
  
  <div id="template-grid"></div>

  <nav id="bottom-nav">
    <button id="shuffle-btn">Shuffle</button>
  </nav>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js"></script>
  <script src="app.js"></script>
</body>
</html>

/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/PUBLIC/STYLES.CSS CODE IS BELOW


body {
  font-family: "Poppins", sans-serif;
  font-weight: 300;
  font-style: normal;
  background-color: #354f52;
  margin: 0;
  padding: 0;
}

h1 {
  text-align: center;
  margin: 20px 0;
  color: #fff;
  font-weight: 500;
}

#tag-search-container {
  text-align: center;
  margin-bottom: 20px;
}

#tag-search {
  padding: 8px 12px;
  font-size: 16px;
  border: 1px solid #fff;
  border-radius: 4px;
  width: 300px;
  max-width: 100%;
}

#template-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
  gap: 20px;
  padding: 20px;
}

.template-card {
  background-color: #52796f;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
  display: flex;
  flex-direction: column;
}

.template-card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #fff;
  font-weight: 400;
}

.template-card img {
  width: 100%;
  height: auto;
  object-fit: cover;
  border-radius: 4px;
  margin-bottom: 10px;
}

.template-card button {
  padding: 8px 16px;
  font-size: 14px;
  background-color: #84a98c;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
}

.template-card a {
  text-decoration: none;
  color: #B7C3F3;
  font-size: 14px;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.modal-content {
  background-color: #5E6472;
  padding: 20px;
  max-width: 90vw;
  max-height: 90vh;
  width: 90vw;
  height: 90vh;
  overflow: hidden;
  position: relative;
  display: flex;
  flex-direction: column;
  border-radius: 4px;
  transform: scale(0.8);
  transition: transform 0.3s ease;
}

.modal-content .buttons-container {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-bottom: 10px;
}

.modal-content .buttons-container button {
  padding: 8px 16px;
  font-size: 14px;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.modal-content .buttons-container button:first-child {
  background-color: #f44336;
}

.modal-content .buttons-container button:last-child {
  background-color: #B7C3F3;
}

.preview-container {
  flex-grow: 1;
  overflow: hidden;
}

.preview-iframe {
  width: 100%;
  height: 100%;
  border: none;
}

#bottom-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  
  /* From https://css.glass */
background: rgba(255, 255, 255, 0.2);
border-radius: 16px;
box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
backdrop-filter: blur(5px);
-webkit-backdrop-filter: blur(5px);
border: 1px solid rgba(255, 255, 255, 0.3);
  padding: 10px;
  text-align: center;
  z-index: 9999;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
}

#shuffle-btn {
  padding: 8px 16px;
  font-size: 16px;
  background-color: #B7C3F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.header {
  text-align: center;
  margin-bottom: 20px;
  display:-webkit-flex;
display:flex;
-webkit-justify-content:space-between;
justify-content:space-between;
-webkit-align-items:center;
align-items:center;
padding-left: 20px;
padding-right:20px;
}

.title-div {
  margin-bottom: 10px;
}

.actions-div {
  display: flex;
  justify-content: space-between;
  align-items: center;
}



/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/SCRAPER.JS CODE IS BELOW
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const puppeteer = require('puppeteer');
const { v4: uuidv4 } = require('uuid');

async function scrapeWebflowTemplates() {
  try {
    const sitemapUrl = 'https://webflow.com/sitemap.xml';
    const response = await axios.get(sitemapUrl);
    const $ = cheerio.load(response.data, { xmlMode: true });
    const templateUrls = $('url > loc')
      .map((_, el) => $(el).text())
      .get()
      .filter(url => url.includes('/templates/html/'));

    const templates = [];

    console.log(`Found ${templateUrls.length} templates. Starting scraping...`);

    for (const [index, templateUrl] of templateUrls.entries()) {
      try {
        console.log(`Scraping template ${index + 1}/${templateUrls.length}: ${templateUrl}`);

        const templateResponse = await axios.get(templateUrl);
        const $template = cheerio.load(templateResponse.data);
        const title = $template('title').text();
        const images = $template('.owl-stage img')
          .map((_, el) => $(el).attr('src'))
          .get();

        const livePreviewUrl = $template('#hero-browser-preview').attr('href');
        const tags = $template('.hero_tag-list_link div')
          .map((_, el) => $(el).text())
          .get();

        const id = uuidv4();

        const screenshotPath = `screenshots/${id}.jpg`;
        await captureScreenshot(livePreviewUrl, screenshotPath);

        templates.push({
          id,
          title,
          images,
          link: templateUrl,
          livePreviewUrl,
          tags,
          screenshotPath
        });

        console.log(`Added template: ${title}`);
      } catch (error) {
        console.error(`Error scraping template: ${templateUrl}`, error);
      }
    }

    fs.writeFileSync('templates.json', JSON.stringify(templates, null, 2));
    console.log(`Scraping completed. ${templates.length} templates saved to templates.json`);
  } catch (error) {
    console.error('Error scraping templates:', error);
  }
}

async function captureScreenshot(url, screenshotPath) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({
    width: 1920,
    height: 1080,
    deviceScaleFactor: 1
  });
  await page.goto(url, { waitUntil: 'networkidle0' });
  await page.screenshot({ path: screenshotPath, type: 'jpeg', quality: 80 });
  await browser.close();
}

scrapeWebflowTemplates();

/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/SERVER.JS CODE IS BELOW
const express = require('express');
const fs = require('fs');
const axios = require('axios');
const NodeCache = require('node-cache');

const app = express();
const cache = new NodeCache({ stdTTL: 3600 }); // Cache for 1 hour

app.use(express.static('public'));

app.use('/screenshots', express.static('screenshots'));


app.get('/api/templates', (req, res) => {
  const templates = JSON.parse(fs.readFileSync('templates.json', 'utf8'));
  res.json(templates);
});

app.get('/proxy', async (req, res) => {
  try {
    const url = req.query.url;
    const isScreenshot = req.query.screenshot === 'true';
    const cacheKey = `${url}_${isScreenshot}`;
    const cachedResponse = cache.get(cacheKey);

    if (cachedResponse) {
      res.type(isScreenshot ? 'image/jpeg' : 'text/html');
      res.send(cachedResponse);
    } else {
      const response = await axios.get(url);
      
      if (isScreenshot) {
        const screenshot = await captureScreenshot(url);
        cache.set(cacheKey, screenshot);
        res.type('image/jpeg');
        res.send(screenshot);
      } else {
        // Modify the HTML content to handle relative URLs
        const modifiedHtml = response.data.replace(/(href|src)="(?!https?:\/\/)(.*?)"/g, (match, attribute, relativeUrl) => {
          const absoluteUrl = new URL(relativeUrl, url).href;
          return `${attribute}="/proxy?url=${encodeURIComponent(absoluteUrl)}"`;
        });
        cache.set(cacheKey, modifiedHtml);
        res.type('text/html');
        res.send(modifiedHtml);
      }
    }
  } catch (error) {
    console.error('Error fetching URL:', error);
    res.status(500).send('Error fetching URL');
  }
});

const puppeteer = require('puppeteer');

async function captureScreenshot(url) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({
    width: 1920,
    height: 1080,
    deviceScaleFactor: 1
  });
  await page.goto(url, { waitUntil: 'networkidle0' });
  const screenshot = await page.screenshot({ type: 'jpeg', quality: 80 });
  await browser.close();
  return screenshot;
}

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/UPDATE-SCREENSHOTS-BATCH.JS CODE IS BELOW
const fs = require("fs");
const puppeteer = require("puppeteer");

// Define the chunkArray function here
function chunkArray(array, size) {
  const chunkedArr = [];
  for (let i = 0; i < array.length; i += size) {
    chunkedArr.push(array.slice(i, i + size));
  }
  return chunkedArr;
}

// Define the delay function here
function delay(time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

// Define your captureScreenshot function here
async function captureScreenshot(url, screenshotPath) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({
    width: 1920,
    height: 1080,
    deviceScaleFactor: 1,
  });
  await page.goto(url, { waitUntil: "networkidle0" });

  // Use the delay function before taking a screenshot
  await delay(5000); // Waits for 5 seconds

  await page.screenshot({ path: screenshotPath, type: "jpeg", quality: 80 });
  await browser.close();
}

// Modify your updateTemplateScreenshots function to process in batches
async function updateTemplateScreenshots() {
  try {
    const templatesData = fs.readFileSync("templates.json", "utf8");
    const templates = JSON.parse(templatesData);
    const batchSize = 10; // Number of screenshots to capture in parallel
    const templateBatches = chunkArray(templates, batchSize);

    console.log(
      `Found ${templates.length} templates. Starting screenshot update in batches of ${batchSize}...`,
    );

    for (const [batchIndex, batch] of templateBatches.entries()) {
      console.log(
        `Processing batch ${batchIndex + 1}/${templateBatches.length}...`,
      );
      await Promise.all(
        batch.map((template) =>
          captureScreenshot(
            template.livePreviewUrl,
            `screenshots/${template.id}.jpg`,
          )
            .then(() =>
              console.log(`Screenshot updated for template: ${template.title}`),
            )
            .catch((error) =>
              console.error(
                `Error capturing screenshot for template: ${template.title}`,
                error,
              ),
            ),
        ),
      );
    }

    console.log("Screenshot update completed.");
  } catch (error) {
    console.error("Error updating template screenshots:", error);
  }
}

// Call the function to start the process
updateTemplateScreenshots();


/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/UPDATE-SCREENSHOTS.JS CODE IS BELOW
const fs = require("fs");
const puppeteer = require("puppeteer");

// Define the delay function
function delay(time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

async function updateTemplateScreenshots() {
  try {
    const templatesData = fs.readFileSync("templates.json", "utf8");
    const templates = JSON.parse(templatesData);

    console.log(
      `Found ${templates.length} templates. Starting screenshot update...`,
    );

    for (const [index, template] of templates.entries()) {
      try {
        console.log(
          `Capturing screenshot for template ${index + 1}/${templates.length}: ${template.title}`,
        );

        const screenshotPath = `screenshots/${template.id}.jpg`;
        await captureScreenshot(template.livePreviewUrl, screenshotPath);

        console.log(`Screenshot updated for template: ${template.title}`);
      } catch (error) {
        console.error(
          `Error capturing screenshot for template: ${template.title}`,
          error,
        );
      }
    }

    console.log("Screenshot update completed.");
  } catch (error) {
    console.error("Error updating template screenshots:", error);
  }
}

async function captureScreenshot(url, screenshotPath) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({
    width: 1920,
    height: 1080,
    deviceScaleFactor: 1,
  });
  await page.goto(url, { waitUntil: "networkidle0" });

  // Use the delay function before taking a screenshot
  await delay(5000); // Waits for 5 seconds

  await page.screenshot({ path: screenshotPath, type: "jpeg", quality: 80 });
  await browser.close();
}

updateTemplateScreenshots();


/USERS/ROMINMIRMOTAHARI/DOCUMENTS/CUSTOM PROJECTS/WEBFLOW TEMPLATE GALLERY/UPDATEEVERYTHING.JS CODE IS BELOW
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const puppeteer = require('puppeteer');
const { v4: uuidv4 } = require('uuid');

// Define the delay function
function delay(time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

async function updateTemplates() {
  try {
    console.log('Starting template update process...');

    // Step 1: Scrape Webflow templates page
    console.log('Scraping Webflow templates page...');
    const newTemplates = await scrapeWebflowTemplatesPage();
    console.log(`Found ${newTemplates.length} templates on the Webflow templates page.`);

    // Step 2: Read existing templates from templates.json
    console.log('Reading existing templates from templates.json...');
    const existingTemplates = JSON.parse(fs.readFileSync('templates.json', 'utf8'));
    console.log(`Found ${existingTemplates.length} existing templates in templates.json.`);

    // Step 3: Filter out new templates that are not already in existingTemplates
    console.log('Filtering out new templates...');
    const templatesToAdd = newTemplates.filter(
      (newTemplate) =>
        !existingTemplates.some((existingTemplate) => existingTemplate.link === newTemplate.link)
    );
    console.log(`Found ${templatesToAdd.length} new templates to add.`);

    // Step 4: Scrape additional details for new templates
    console.log('Scraping additional details for new templates...');
    const detailedTemplates = await Promise.all(
      templatesToAdd.map((template) => scrapeTemplateDetails(template))
    );
    console.log('Finished scraping additional details for new templates.');

    // Step 5: Merge new templates with existing templates
    console.log('Merging new templates with existing templates...');
    const mergedTemplates = [...existingTemplates, ...detailedTemplates];
    console.log(`Merged templates. Total templates: ${mergedTemplates.length}`);

    // Step 6: Write the updated templates to templates.json
    console.log('Writing updated templates to templates.json...');
    fs.writeFileSync('templates.json', JSON.stringify(mergedTemplates, null, 2));
    console.log('Templates updated successfully in templates.json.');

    console.log('Template update process completed.');
  } catch (error) {
    console.error('Error updating templates:', error);
  }
}

async function scrapeWebflowTemplatesPage() {
  try {
    const templatesPageUrl = 'https://webflow.com/templates';
    const response = await axios.get(templatesPageUrl);
    const $ = cheerio.load(response.data);

    const templates = [];

    $('div.tm-templates_grid_item').each((index, element) => {
      const $element = $(element);
      const link = $element.find('a.tm-link').attr('href');
      const title = $element.find('a.template-name').text();

      templates.push({ link, title });
    });

    return templates;
  } catch (error) {
    console.error('Error scraping templates page:', error);
    return [];
  }
}

async function scrapeTemplateDetails(template) {
  try {
    const templateUrl = `https://webflow.com${template.link}`;
    const response = await axios.get(templateUrl);
    const $ = cheerio.load(response.data);

    const images = $('.owl-stage img')
      .map((_, el) => $(el).attr('src'))
      .get();

    const livePreviewUrl = $('#hero-browser-preview').attr('href');
    const tags = $('.hero_tag-list_link div')
      .map((_, el) => $(el).text())
      .get();

    const id = uuidv4();
    const screenshotPath = `screenshots/${id}.jpg`;
    await captureScreenshot(livePreviewUrl, screenshotPath);

    return {
      id,
      title: template.title,
      images,
      link: templateUrl,
      livePreviewUrl,
      tags,
      screenshotPath,
    };
  } catch (error) {
    console.error(`Error scraping template details: ${template.link}`, error);
    return null;
  }
}

async function captureScreenshot(url, screenshotPath) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({
    width: 1920,
    height: 1080,
    deviceScaleFactor: 1,
  });
  await page.goto(url, { waitUntil: 'networkidle0' });

  // Use the delay function before taking a screenshot
  console.log(`Waiting for 5 seconds before capturing screenshot for ${url}...`);
  await delay(5000); // Waits for 5 seconds

  await page.screenshot({ path: screenshotPath, type: 'jpeg', quality: 80 });
  console.log(`Screenshot captured for ${url}.`);

  await browser.close();
}

// Call the updateTemplates function to start the process
updateTemplates();
